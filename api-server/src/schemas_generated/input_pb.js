// source: input.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.qed.schemas.input.CreateCharacterCommand', null, global);
goog.exportSymbol('proto.qed.schemas.input.Direction', null, global);
goog.exportSymbol('proto.qed.schemas.input.InputEvent', null, global);
goog.exportSymbol('proto.qed.schemas.input.ListCharactersCommand', null, global);
goog.exportSymbol('proto.qed.schemas.input.MoveCommand', null, global);
goog.exportSymbol('proto.qed.schemas.input.PlayerCommand', null, global);
goog.exportSymbol('proto.qed.schemas.input.PlayerCommand.CommandCase', null, global);
goog.exportSymbol('proto.qed.schemas.input.SayCommand', null, global);
goog.exportSymbol('proto.qed.schemas.input.SelectCharacterCommand', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qed.schemas.input.MoveCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.qed.schemas.input.MoveCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.qed.schemas.input.MoveCommand.displayName = 'proto.qed.schemas.input.MoveCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qed.schemas.input.SayCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.qed.schemas.input.SayCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.qed.schemas.input.SayCommand.displayName = 'proto.qed.schemas.input.SayCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qed.schemas.input.CreateCharacterCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.qed.schemas.input.CreateCharacterCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.qed.schemas.input.CreateCharacterCommand.displayName = 'proto.qed.schemas.input.CreateCharacterCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qed.schemas.input.ListCharactersCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.qed.schemas.input.ListCharactersCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.qed.schemas.input.ListCharactersCommand.displayName = 'proto.qed.schemas.input.ListCharactersCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qed.schemas.input.SelectCharacterCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.qed.schemas.input.SelectCharacterCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.qed.schemas.input.SelectCharacterCommand.displayName = 'proto.qed.schemas.input.SelectCharacterCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qed.schemas.input.PlayerCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.qed.schemas.input.PlayerCommand.oneofGroups_);
};
goog.inherits(proto.qed.schemas.input.PlayerCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.qed.schemas.input.PlayerCommand.displayName = 'proto.qed.schemas.input.PlayerCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.qed.schemas.input.InputEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.qed.schemas.input.InputEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.qed.schemas.input.InputEvent.displayName = 'proto.qed.schemas.input.InputEvent';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qed.schemas.input.MoveCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.qed.schemas.input.MoveCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qed.schemas.input.MoveCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qed.schemas.input.MoveCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    direction: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qed.schemas.input.MoveCommand}
 */
proto.qed.schemas.input.MoveCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qed.schemas.input.MoveCommand;
  return proto.qed.schemas.input.MoveCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qed.schemas.input.MoveCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qed.schemas.input.MoveCommand}
 */
proto.qed.schemas.input.MoveCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.qed.schemas.input.Direction} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qed.schemas.input.MoveCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qed.schemas.input.MoveCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qed.schemas.input.MoveCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qed.schemas.input.MoveCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Direction direction = 1;
 * @return {!proto.qed.schemas.input.Direction}
 */
proto.qed.schemas.input.MoveCommand.prototype.getDirection = function() {
  return /** @type {!proto.qed.schemas.input.Direction} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.qed.schemas.input.Direction} value
 * @return {!proto.qed.schemas.input.MoveCommand} returns this
 */
proto.qed.schemas.input.MoveCommand.prototype.setDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qed.schemas.input.SayCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.qed.schemas.input.SayCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qed.schemas.input.SayCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qed.schemas.input.SayCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qed.schemas.input.SayCommand}
 */
proto.qed.schemas.input.SayCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qed.schemas.input.SayCommand;
  return proto.qed.schemas.input.SayCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qed.schemas.input.SayCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qed.schemas.input.SayCommand}
 */
proto.qed.schemas.input.SayCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qed.schemas.input.SayCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qed.schemas.input.SayCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qed.schemas.input.SayCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qed.schemas.input.SayCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string content = 1;
 * @return {string}
 */
proto.qed.schemas.input.SayCommand.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.qed.schemas.input.SayCommand} returns this
 */
proto.qed.schemas.input.SayCommand.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qed.schemas.input.CreateCharacterCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.qed.schemas.input.CreateCharacterCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qed.schemas.input.CreateCharacterCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qed.schemas.input.CreateCharacterCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    might: jspb.Message.getFieldWithDefault(msg, 2, 0),
    finesse: jspb.Message.getFieldWithDefault(msg, 3, 0),
    wits: jspb.Message.getFieldWithDefault(msg, 4, 0),
    grit: jspb.Message.getFieldWithDefault(msg, 5, 0),
    presence: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qed.schemas.input.CreateCharacterCommand}
 */
proto.qed.schemas.input.CreateCharacterCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qed.schemas.input.CreateCharacterCommand;
  return proto.qed.schemas.input.CreateCharacterCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qed.schemas.input.CreateCharacterCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qed.schemas.input.CreateCharacterCommand}
 */
proto.qed.schemas.input.CreateCharacterCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFinesse(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWits(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGrit(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPresence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qed.schemas.input.CreateCharacterCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qed.schemas.input.CreateCharacterCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qed.schemas.input.CreateCharacterCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qed.schemas.input.CreateCharacterCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMight();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getFinesse();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getWits();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getGrit();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getPresence();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.qed.schemas.input.CreateCharacterCommand.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.qed.schemas.input.CreateCharacterCommand} returns this
 */
proto.qed.schemas.input.CreateCharacterCommand.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 might = 2;
 * @return {number}
 */
proto.qed.schemas.input.CreateCharacterCommand.prototype.getMight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.qed.schemas.input.CreateCharacterCommand} returns this
 */
proto.qed.schemas.input.CreateCharacterCommand.prototype.setMight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 finesse = 3;
 * @return {number}
 */
proto.qed.schemas.input.CreateCharacterCommand.prototype.getFinesse = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.qed.schemas.input.CreateCharacterCommand} returns this
 */
proto.qed.schemas.input.CreateCharacterCommand.prototype.setFinesse = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 wits = 4;
 * @return {number}
 */
proto.qed.schemas.input.CreateCharacterCommand.prototype.getWits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.qed.schemas.input.CreateCharacterCommand} returns this
 */
proto.qed.schemas.input.CreateCharacterCommand.prototype.setWits = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 grit = 5;
 * @return {number}
 */
proto.qed.schemas.input.CreateCharacterCommand.prototype.getGrit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.qed.schemas.input.CreateCharacterCommand} returns this
 */
proto.qed.schemas.input.CreateCharacterCommand.prototype.setGrit = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 presence = 6;
 * @return {number}
 */
proto.qed.schemas.input.CreateCharacterCommand.prototype.getPresence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.qed.schemas.input.CreateCharacterCommand} returns this
 */
proto.qed.schemas.input.CreateCharacterCommand.prototype.setPresence = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qed.schemas.input.ListCharactersCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.qed.schemas.input.ListCharactersCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qed.schemas.input.ListCharactersCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qed.schemas.input.ListCharactersCommand.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qed.schemas.input.ListCharactersCommand}
 */
proto.qed.schemas.input.ListCharactersCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qed.schemas.input.ListCharactersCommand;
  return proto.qed.schemas.input.ListCharactersCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qed.schemas.input.ListCharactersCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qed.schemas.input.ListCharactersCommand}
 */
proto.qed.schemas.input.ListCharactersCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qed.schemas.input.ListCharactersCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qed.schemas.input.ListCharactersCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qed.schemas.input.ListCharactersCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qed.schemas.input.ListCharactersCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qed.schemas.input.SelectCharacterCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.qed.schemas.input.SelectCharacterCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qed.schemas.input.SelectCharacterCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qed.schemas.input.SelectCharacterCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    characterId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qed.schemas.input.SelectCharacterCommand}
 */
proto.qed.schemas.input.SelectCharacterCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qed.schemas.input.SelectCharacterCommand;
  return proto.qed.schemas.input.SelectCharacterCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qed.schemas.input.SelectCharacterCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qed.schemas.input.SelectCharacterCommand}
 */
proto.qed.schemas.input.SelectCharacterCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCharacterId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qed.schemas.input.SelectCharacterCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qed.schemas.input.SelectCharacterCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qed.schemas.input.SelectCharacterCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qed.schemas.input.SelectCharacterCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCharacterId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string character_id = 1;
 * @return {string}
 */
proto.qed.schemas.input.SelectCharacterCommand.prototype.getCharacterId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.qed.schemas.input.SelectCharacterCommand} returns this
 */
proto.qed.schemas.input.SelectCharacterCommand.prototype.setCharacterId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.qed.schemas.input.PlayerCommand.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.qed.schemas.input.PlayerCommand.CommandCase = {
  COMMAND_NOT_SET: 0,
  MOVE: 1,
  SAY: 2,
  CREATE_CHARACTER: 3,
  LIST_CHARACTERS: 4,
  SELECT_CHARACTER: 5
};

/**
 * @return {proto.qed.schemas.input.PlayerCommand.CommandCase}
 */
proto.qed.schemas.input.PlayerCommand.prototype.getCommandCase = function() {
  return /** @type {proto.qed.schemas.input.PlayerCommand.CommandCase} */(jspb.Message.computeOneofCase(this, proto.qed.schemas.input.PlayerCommand.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qed.schemas.input.PlayerCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.qed.schemas.input.PlayerCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qed.schemas.input.PlayerCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qed.schemas.input.PlayerCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    move: (f = msg.getMove()) && proto.qed.schemas.input.MoveCommand.toObject(includeInstance, f),
    say: (f = msg.getSay()) && proto.qed.schemas.input.SayCommand.toObject(includeInstance, f),
    createCharacter: (f = msg.getCreateCharacter()) && proto.qed.schemas.input.CreateCharacterCommand.toObject(includeInstance, f),
    listCharacters: (f = msg.getListCharacters()) && proto.qed.schemas.input.ListCharactersCommand.toObject(includeInstance, f),
    selectCharacter: (f = msg.getSelectCharacter()) && proto.qed.schemas.input.SelectCharacterCommand.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qed.schemas.input.PlayerCommand}
 */
proto.qed.schemas.input.PlayerCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qed.schemas.input.PlayerCommand;
  return proto.qed.schemas.input.PlayerCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qed.schemas.input.PlayerCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qed.schemas.input.PlayerCommand}
 */
proto.qed.schemas.input.PlayerCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.qed.schemas.input.MoveCommand;
      reader.readMessage(value,proto.qed.schemas.input.MoveCommand.deserializeBinaryFromReader);
      msg.setMove(value);
      break;
    case 2:
      var value = new proto.qed.schemas.input.SayCommand;
      reader.readMessage(value,proto.qed.schemas.input.SayCommand.deserializeBinaryFromReader);
      msg.setSay(value);
      break;
    case 3:
      var value = new proto.qed.schemas.input.CreateCharacterCommand;
      reader.readMessage(value,proto.qed.schemas.input.CreateCharacterCommand.deserializeBinaryFromReader);
      msg.setCreateCharacter(value);
      break;
    case 4:
      var value = new proto.qed.schemas.input.ListCharactersCommand;
      reader.readMessage(value,proto.qed.schemas.input.ListCharactersCommand.deserializeBinaryFromReader);
      msg.setListCharacters(value);
      break;
    case 5:
      var value = new proto.qed.schemas.input.SelectCharacterCommand;
      reader.readMessage(value,proto.qed.schemas.input.SelectCharacterCommand.deserializeBinaryFromReader);
      msg.setSelectCharacter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qed.schemas.input.PlayerCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qed.schemas.input.PlayerCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qed.schemas.input.PlayerCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qed.schemas.input.PlayerCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMove();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.qed.schemas.input.MoveCommand.serializeBinaryToWriter
    );
  }
  f = message.getSay();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.qed.schemas.input.SayCommand.serializeBinaryToWriter
    );
  }
  f = message.getCreateCharacter();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.qed.schemas.input.CreateCharacterCommand.serializeBinaryToWriter
    );
  }
  f = message.getListCharacters();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.qed.schemas.input.ListCharactersCommand.serializeBinaryToWriter
    );
  }
  f = message.getSelectCharacter();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.qed.schemas.input.SelectCharacterCommand.serializeBinaryToWriter
    );
  }
};


/**
 * optional MoveCommand move = 1;
 * @return {?proto.qed.schemas.input.MoveCommand}
 */
proto.qed.schemas.input.PlayerCommand.prototype.getMove = function() {
  return /** @type{?proto.qed.schemas.input.MoveCommand} */ (
    jspb.Message.getWrapperField(this, proto.qed.schemas.input.MoveCommand, 1));
};


/**
 * @param {?proto.qed.schemas.input.MoveCommand|undefined} value
 * @return {!proto.qed.schemas.input.PlayerCommand} returns this
*/
proto.qed.schemas.input.PlayerCommand.prototype.setMove = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.qed.schemas.input.PlayerCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.qed.schemas.input.PlayerCommand} returns this
 */
proto.qed.schemas.input.PlayerCommand.prototype.clearMove = function() {
  return this.setMove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.qed.schemas.input.PlayerCommand.prototype.hasMove = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SayCommand say = 2;
 * @return {?proto.qed.schemas.input.SayCommand}
 */
proto.qed.schemas.input.PlayerCommand.prototype.getSay = function() {
  return /** @type{?proto.qed.schemas.input.SayCommand} */ (
    jspb.Message.getWrapperField(this, proto.qed.schemas.input.SayCommand, 2));
};


/**
 * @param {?proto.qed.schemas.input.SayCommand|undefined} value
 * @return {!proto.qed.schemas.input.PlayerCommand} returns this
*/
proto.qed.schemas.input.PlayerCommand.prototype.setSay = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.qed.schemas.input.PlayerCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.qed.schemas.input.PlayerCommand} returns this
 */
proto.qed.schemas.input.PlayerCommand.prototype.clearSay = function() {
  return this.setSay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.qed.schemas.input.PlayerCommand.prototype.hasSay = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CreateCharacterCommand create_character = 3;
 * @return {?proto.qed.schemas.input.CreateCharacterCommand}
 */
proto.qed.schemas.input.PlayerCommand.prototype.getCreateCharacter = function() {
  return /** @type{?proto.qed.schemas.input.CreateCharacterCommand} */ (
    jspb.Message.getWrapperField(this, proto.qed.schemas.input.CreateCharacterCommand, 3));
};


/**
 * @param {?proto.qed.schemas.input.CreateCharacterCommand|undefined} value
 * @return {!proto.qed.schemas.input.PlayerCommand} returns this
*/
proto.qed.schemas.input.PlayerCommand.prototype.setCreateCharacter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.qed.schemas.input.PlayerCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.qed.schemas.input.PlayerCommand} returns this
 */
proto.qed.schemas.input.PlayerCommand.prototype.clearCreateCharacter = function() {
  return this.setCreateCharacter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.qed.schemas.input.PlayerCommand.prototype.hasCreateCharacter = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ListCharactersCommand list_characters = 4;
 * @return {?proto.qed.schemas.input.ListCharactersCommand}
 */
proto.qed.schemas.input.PlayerCommand.prototype.getListCharacters = function() {
  return /** @type{?proto.qed.schemas.input.ListCharactersCommand} */ (
    jspb.Message.getWrapperField(this, proto.qed.schemas.input.ListCharactersCommand, 4));
};


/**
 * @param {?proto.qed.schemas.input.ListCharactersCommand|undefined} value
 * @return {!proto.qed.schemas.input.PlayerCommand} returns this
*/
proto.qed.schemas.input.PlayerCommand.prototype.setListCharacters = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.qed.schemas.input.PlayerCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.qed.schemas.input.PlayerCommand} returns this
 */
proto.qed.schemas.input.PlayerCommand.prototype.clearListCharacters = function() {
  return this.setListCharacters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.qed.schemas.input.PlayerCommand.prototype.hasListCharacters = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SelectCharacterCommand select_character = 5;
 * @return {?proto.qed.schemas.input.SelectCharacterCommand}
 */
proto.qed.schemas.input.PlayerCommand.prototype.getSelectCharacter = function() {
  return /** @type{?proto.qed.schemas.input.SelectCharacterCommand} */ (
    jspb.Message.getWrapperField(this, proto.qed.schemas.input.SelectCharacterCommand, 5));
};


/**
 * @param {?proto.qed.schemas.input.SelectCharacterCommand|undefined} value
 * @return {!proto.qed.schemas.input.PlayerCommand} returns this
*/
proto.qed.schemas.input.PlayerCommand.prototype.setSelectCharacter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.qed.schemas.input.PlayerCommand.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.qed.schemas.input.PlayerCommand} returns this
 */
proto.qed.schemas.input.PlayerCommand.prototype.clearSelectCharacter = function() {
  return this.setSelectCharacter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.qed.schemas.input.PlayerCommand.prototype.hasSelectCharacter = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.qed.schemas.input.InputEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.qed.schemas.input.InputEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.qed.schemas.input.InputEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qed.schemas.input.InputEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    traceId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    payload: (f = msg.getPayload()) && proto.qed.schemas.input.PlayerCommand.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.qed.schemas.input.InputEvent}
 */
proto.qed.schemas.input.InputEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.qed.schemas.input.InputEvent;
  return proto.qed.schemas.input.InputEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.qed.schemas.input.InputEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.qed.schemas.input.InputEvent}
 */
proto.qed.schemas.input.InputEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTraceId(value);
      break;
    case 3:
      var value = new proto.qed.schemas.input.PlayerCommand;
      reader.readMessage(value,proto.qed.schemas.input.PlayerCommand.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.qed.schemas.input.InputEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.qed.schemas.input.InputEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.qed.schemas.input.InputEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.qed.schemas.input.InputEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTraceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.qed.schemas.input.PlayerCommand.serializeBinaryToWriter
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.qed.schemas.input.InputEvent.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.qed.schemas.input.InputEvent} returns this
 */
proto.qed.schemas.input.InputEvent.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string trace_id = 2;
 * @return {string}
 */
proto.qed.schemas.input.InputEvent.prototype.getTraceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.qed.schemas.input.InputEvent} returns this
 */
proto.qed.schemas.input.InputEvent.prototype.setTraceId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional PlayerCommand payload = 3;
 * @return {?proto.qed.schemas.input.PlayerCommand}
 */
proto.qed.schemas.input.InputEvent.prototype.getPayload = function() {
  return /** @type{?proto.qed.schemas.input.PlayerCommand} */ (
    jspb.Message.getWrapperField(this, proto.qed.schemas.input.PlayerCommand, 3));
};


/**
 * @param {?proto.qed.schemas.input.PlayerCommand|undefined} value
 * @return {!proto.qed.schemas.input.InputEvent} returns this
*/
proto.qed.schemas.input.InputEvent.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.qed.schemas.input.InputEvent} returns this
 */
proto.qed.schemas.input.InputEvent.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.qed.schemas.input.InputEvent.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.qed.schemas.input.Direction = {
  UNSPECIFIED: 0,
  NORTH: 1,
  SOUTH: 2,
  EAST: 3,
  WEST: 4,
  UP: 5,
  DOWN: 6
};

goog.object.extend(exports, proto.qed.schemas.input);
